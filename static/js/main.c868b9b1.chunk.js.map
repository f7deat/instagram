{"version":3,"sources":["logo.svg","post.js","firebase.js","modal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","key","user","src","logo","alt","className","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","auth","storage","Modal","open","onClick","App","useState","posts","setPosts","setOpen","useEffect","collection","onSnapshot","snapshot","docs","map","doc","id","post","data","aria-label","class","fill","height","viewBox","width","d","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,kC,mMCY5BC,MATf,YAA2B,EAAZC,IAAa,IAARC,EAAO,EAAPA,KAChB,OACI,6BACI,4BAAKA,GACL,yBAAKC,IAAKC,IAAMC,IAAI,GAAGC,UAAU,gBACjC,yC,gBCKNC,EAXcC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,YACVV,IAASW,OACNX,IAASY,UCMVC,MAnBf,YAMI,OANqB,EAARC,KAOT,yBAAKhB,UAAU,gBACX,yBAAKA,UAAU,SACX,yBAAKA,UAAU,gBACf,yBAAKA,UAAU,eACf,yBAAKA,UAAU,gBACX,4BAAQA,UAAU,OAAlB,UACA,4BAAQA,UAAU,MAAMiB,QAAS,cAAjC,aCoCLC,MA7Cf,WAAgB,IAAD,EAEaC,mBAAS,IAFtB,mBAENC,EAFM,KAECC,EAFD,OAGWF,oBAAS,GAHpB,mBAGNH,EAHM,KAGAM,EAHA,KAeb,OAVAC,qBAAU,WACRtB,EAAGuB,WAAW,SAASC,YAAW,SAAAC,GAEhCL,EAASK,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAK,CACjCC,GAAID,EAAIC,GACRC,KAAMF,EAAIG,iBAGb,IAGD,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,yBAAKH,IAAI,wFAAwFG,UAAU,mBAAmBD,IAAI,UAEpI,yBAAKC,UAAU,WACb,4BAAQA,UAAU,MAAMiB,QAAS,kBAAMK,GAAQ,KAC7C,yBAAKW,aAAW,OAAOC,MAAM,UAAUC,KAAK,UAAUC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,MAAK,0BAAMC,EAAE,6UAMnH,yBAAKvC,UAAU,oBACb,yBAAKA,UAAU,SAEboB,EAAMQ,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,KAAP,OACR,kBAAC,EAAD,CAAMpC,IAAKmC,EAAIlC,KAAMmC,EAAKnC,YAKhC,kBAAC,EAAD,CAAOoB,KAAMA,MClCCwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c868b9b1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\n\r\nfunction Post({key, user}) {\r\n    return (\r\n        <div>\r\n            <h3>{user}</h3>\r\n            <img src={logo} alt=\"\" className=\"post__image\"/>\r\n            <h4>caption</h4>\r\n        </div>\r\n    )\r\n}\r\nexport default Post","import firebase from 'firebase'\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n  apiKey: \"AIzaSyB_A6-PJMxkdZPP6nZD5pWwmMNBr0upE_w\",\r\n  authDomain: \"instagram-48891.firebaseapp.com\",\r\n  databaseURL: \"https://instagram-48891.firebaseio.com\",\r\n  projectId: \"instagram-48891\",\r\n  storageBucket: \"instagram-48891.appspot.com\",\r\n  messagingSenderId: \"294065804481\",\r\n  appId: \"1:294065804481:web:05905c0796ca48e49b7040\",\r\n  measurementId: \"G-BDV0J4V1ZJ\"\r\n  });\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst storage = firebase.storage();\r\n\r\nexport {db, auth, storage};","import React from 'react';\r\n\r\nfunction Modal({ open }) {\r\n\r\n    const signUp = (event) => {\r\n\r\n    }\r\n\r\n    return (\r\n        <div className=\"d-flex h-100\">\r\n            <div className=\"modal\">\r\n                <div className=\"modal-title\"></div>\r\n                <div className=\"modal-body\"></div>\r\n                <div className=\"modal-footer\">\r\n                    <button className=\"btn\">Cancel</button>\r\n                    <button className=\"btn\" onClick={() => signUp()}>Login</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Modal","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Post from './post';\nimport { db } from './firebase';\nimport Modal from './modal';\n\nfunction App() {\n\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  useEffect(() => {\n    db.collection('posts').onSnapshot(snapshot => {\n      debugger\n      setPosts(snapshot.docs.map(doc => ({\n        id: doc.id,\n        post: doc.data()\n      })));\n    })\n  }, []);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__header\">\n        <div className=\"container\">\n          <div className=\"d-flex\">\n            <div className=\"flex-grow-1\">\n              <img src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\" className=\"app__headerImage\" alt=\"logo\" />\n            </div>\n            <div className=\"control\">\n              <button className=\"btn\" onClick={() => setOpen(true)}>\n                <svg aria-label=\"Home\" class=\"_8-yf5 \" fill=\"#262626\" height=\"22\" viewBox=\"0 0 48 48\" width=\"22\"><path d=\"M45.3 48H30c-.8 0-1.5-.7-1.5-1.5V34.2c0-2.6-2-4.6-4.6-4.6s-4.6 2-4.6 4.6v12.3c0 .8-.7 1.5-1.5 1.5H2.5c-.8 0-1.5-.7-1.5-1.5V23c0-.4.2-.8.4-1.1L22.9.4c.6-.6 1.5-.6 2.1 0l21.5 21.5c.4.4.6 1.1.3 1.6 0 .1-.1.1-.1.2v22.8c.1.8-.6 1.5-1.4 1.5zm-13.8-3h12.3V23.4L24 3.6l-20 20V45h12.3V34.2c0-4.3 3.3-7.6 7.6-7.6s7.6 3.3 7.6 7.6V45z\"></path></svg>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"container d-flex\">\n        <div className=\"col-8\">\n        {\n          posts.map(({ id, post }) => (\n            <Post key={id} user={post.user} />\n          ))\n        }\n        </div>\n      </div>\n      <Modal open={open}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}